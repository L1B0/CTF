import string

dword_411020 = [
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x41,0x40,0xF3,0x9A,0x06,0xAA,0xB1,
0x41,0x33,0x06,0xC2,0x9F,0xF7,0x66,0x7A,0x40,0x72,0x46,0x31,0x05,0xF1,0xCC,0xCB,
0x82,0x66,0x0C,0x84,0x3F,0xEF,0xCD,0xF4,0x83,0x27,0x4C,0x77,0xA5,0xE9,0x67,0x45,
0xC3,0x55,0x0A,0x46,0xA0,0x18,0xAB,0x8E,0xC2,0x14,0x4A,0xB5,0x3A,0x1E,0x01,0x3F,
0x47,0x7C,0x9E,0x2C,0xD5,0x24,0xA9,0xF0,0x46,0x3D,0xDE,0xDF,0x4F,0x22,0x03,0x41,
0x06,0x4F,0x98,0xEE,0x4A,0xD3,0xCF,0x8A,0x07,0x0E,0xD8,0x1D,0xD0,0xD5,0x65,0x3B,
0xC5,0x1A,0x92,0xA8,0xEA,0xCB,0x64,0x04,0xC4,0x5B,0xD2,0x5B,0x70,0xCD,0xCE,0xB5,
0x84,0x29,0x94,0x6A,0x75,0x3C,0x02,0x7E,0x85,0x68,0xD4,0x99,0xEF,0x3A,0xA8,0xCF,
0xCD,0x49,0xBA,0x7D,0x00,0xB3,0x60,0xF8,0xCC,0x08,0xFA,0x8E,0x9A,0xB5,0xCA,0x49,
0x8C,0x7A,0xBC,0xBF,0x9F,0x44,0x06,0x82,0x8D,0x3B,0xFC,0x4C,0x05,0x42,0xAC,0x33,
0x4F,0x2F,0xB6,0xF9,0x3F,0x5C,0xAD,0x0C,0x4E,0x6E,0xF6,0x0A,0xA5,0x5A,0x07,0xBD,
0x0E,0x1C,0xB0,0x3B,0xA0,0xAB,0xCB,0x76,0x0F,0x5D,0xF0,0xC8,0x3A,0xAD,0x61,0xC7,
0x8A,0x35,0x24,0x51,0xD5,0x97,0xC9,0x08,0x8B,0x74,0x64,0xA2,0x4F,0x91,0x63,0xB9,
0xCB,0x06,0x22,0x93,0x4A,0x60,0xAF,0x72,0xCA,0x47,0x62,0x60,0xD0,0x66,0x05,0xC3,
0x08,0x53,0x28,0xD5,0xEA,0x78,0x04,0xFC,0x09,0x12,0x68,0x26,0x70,0x7E,0xAE,0x4D,
0x49,0x60,0x2E,0x17,0x75,0x8F,0x62,0x86,0x48,0x21,0x6E,0xE4,0xEF,0x89,0xC8,0x37,
0xD9,0x22,0xF2,0xDF,0xAA,0x9C,0xF3,0xE9,0xD8,0x63,0xB2,0x2C,0x30,0x9A,0x59,0x58,
0x98,0x11,0xF4,0x1D,0x35,0x6B,0x95,0x93,0x99,0x50,0xB4,0xEE,0xAF,0x6D,0x3F,0x22,
0x5B,0x44,0xFE,0x5B,0x95,0x73,0x3E,0x1D,0x5A,0x05,0xBE,0xA8,0x0F,0x75,0x94,0xAC,
0x1A,0x77,0xF8,0x99,0x0A,0x84,0x58,0x67,0x1B,0x36,0xB8,0x6A,0x90,0x82,0xF2,0xD6,
0x9E,0x5E,0x6C,0xF3,0x7F,0xB8,0x5A,0x19,0x9F,0x1F,0x2C,0x00,0xE5,0xBE,0xF0,0xA8,
0xDF,0x6D,0x6A,0x31,0xE0,0x4F,0x3C,0x63,0xDE,0x2C,0x2A,0xC2,0x7A,0x49,0x96,0xD2,
0x1C,0x38,0x60,0x77,0x40,0x57,0x97,0xED,0x1D,0x79,0x20,0x84,0xDA,0x51,0x3D,0x5C,
0x5D,0x0B,0x66,0xB5,0xDF,0xA0,0xF1,0x97,0x5C,0x4A,0x26,0x46,0x45,0xA6,0x5B,0x26,
0x14,0x6B,0x48,0xA2,0xAA,0x2F,0x93,0x11,0x15,0x2A,0x08,0x51,0x30,0x29,0x39,0xA0,
0x55,0x58,0x4E,0x60,0x35,0xD8,0xF5,0x6B,0x54,0x19,0x0E,0x93,0xAF,0xDE,0x5F,0xDA,
0x96,0x0D,0x44,0x26,0x95,0xC0,0x5E,0xE5,0x97,0x4C,0x04,0xD5,0x0F,0xC6,0xF4,0x54,
0xD7,0x3E,0x42,0xE4,0x0A,0x37,0x38,0x9F,0xD6,0x7F,0x02,0x17,0x90,0x31,0x92,0x2E,
0x53,0x17,0xD6,0x8E,0x7F,0x0B,0x3A,0xE1,0x52,0x56,0x96,0x7D,0xE5,0x0D,0x90,0x50,
0x12,0x24,0xD0,0x4C,0xE0,0xFC,0x5C,0x9B,0x13,0x65,0x90,0xBF,0x7A,0xFA,0xF6,0x2A,
0xD1,0x71,0xDA,0x0A,0x40,0xE4,0xF7,0x15,0xD0,0x30,0x9A,0xF9,0xDA,0xE2,0x5D,0xA4,
0x90,0x42,0xDC,0xC8,0xDF,0x13,0x91,0x6F,0x91,0x03,0x9C,0x3B,0x45,0x15,0x3B,0xDE,
0xF1,0xF4,0x62,0x9B,0xFF,0xC3,0xD5,0xCA,0xF0,0xB5,0x22,0x68,0x65,0xC5,0x7F,0x7B,
0xB0,0xC7,0x64,0x59,0x60,0x34,0xB3,0xB0,0xB1,0x86,0x24,0xAA,0xFA,0x32,0x19,0x01,
0x73,0x92,0x6E,0x1F,0xC0,0x2C,0x18,0x3E,0x72,0xD3,0x2E,0xEC,0x5A,0x2A,0xB2,0x8F,
0x32,0xA1,0x68,0xDD,0x5F,0xDB,0x7E,0x44,0x33,0xE0,0x28,0x2E,0xC5,0xDD,0xD4,0xF5,
0xB6,0x88,0xFC,0xB7,0x2A,0xE7,0x7C,0x3A,0xB7,0xC9,0xBC,0x44,0xB0,0xE1,0xD6,0x8B,
0xF7,0xBB,0xFA,0x75,0xB5,0x10,0x1A,0x40,0xF6,0xFA,0xBA,0x86,0x2F,0x16,0xB0,0xF1,
0x34,0xEE,0xF0,0x33,0x15,0x08,0xB1,0xCE,0x35,0xAF,0xB0,0xC0,0x8F,0x0E,0x1B,0x7F,
0x75,0xDD,0xF6,0xF1,0x8A,0xFF,0xD7,0xB4,0x74,0x9C,0xB6,0x02,0x10,0xF9,0x7D,0x05,
0x3C,0xBD,0xD8,0xE6,0xFF,0x70,0xB5,0x32,0x3D,0xFC,0x98,0x15,0x65,0x76,0x1F,0x83,
0x7D,0x8E,0xDE,0x24,0x60,0x87,0xD3,0x48,0x7C,0xCF,0x9E,0xD7,0xFA,0x81,0x79,0xF9,
0xBE,0xDB,0xD4,0x62,0xC0,0x9F,0x78,0xC6,0xBF,0x9A,0x94,0x91,0x5A,0x99,0xD2,0x77,
0xFF,0xE8,0xD2,0xA0,0x5F,0x68,0x1E,0xBC,0xFE,0xA9,0x92,0x53,0xC5,0x6E,0xB4,0x0D,
0x7B,0xC1,0x46,0xCA,0x2A,0x54,0x1C,0xC2,0x7A,0x80,0x06,0x39,0xB0,0x52,0xB6,0x73,
0x3A,0xF2,0x40,0x08,0xB5,0xA3,0x7A,0xB8,0x3B,0xB3,0x00,0xFB,0x2F,0xA5,0xD0,0x09,
0xF9,0xA7,0x4A,0x4E,0x15,0xBB,0xD1,0x36,0xF8,0xE6,0x0A,0xBD,0x8F,0xBD,0x7B,0x87,
0xB8,0x94,0x4C,0x8C,0x8A,0x4C,0xB7,0x4C,0xB9,0xD5,0x0C,0x7F,0x10,0x4A,0x1D,0xFD,
0x28,0xD6,0x90,0x44,0x55,0x5F,0x26,0x23,0x29,0x97,0xD0,0xB7,0xCF,0x59,0x8C,0x92,
0x69,0xE5,0x96,0x86,0xCA,0xA8,0x40,0x59,0x68,0xA4,0xD6,0x75,0x50,0xAE,0xEA,0xE8,
0xAA,0xB0,0x9C,0xC0,0x6A,0xB0,0xEB,0xD7,0xAB,0xF1,0xDC,0x33,0xF0,0xB6,0x41,0x66,
0xEB,0x83,0x9A,0x02,0xF5,0x47,0x8D,0xAD,0xEA,0xC2,0xDA,0xF1,0x6F,0x41,0x27,0x1C,
0x6F,0xAA,0x0E,0x68,0x80,0x7B,0x8F,0xD3,0x6E,0xEB,0x4E,0x9B,0x1A,0x7D,0x25,0x62,
0x2E,0x99,0x08,0xAA,0x1F,0x8C,0xE9,0xA9,0x2F,0xD8,0x48,0x59,0x85,0x8A,0x43,0x18,
0xED,0xCC,0x02,0xEC,0xBF,0x94,0x42,0x27,0xEC,0x8D,0x42,0x1F,0x25,0x92,0xE8,0x96,
0xAC,0xFF,0x04,0x2E,0x20,0x63,0x24,0x5D,0xAD,0xBE,0x44,0xDD,0xBA,0x65,0x8E,0xEC,
0xE5,0x9F,0x2A,0x39,0x55,0xEC,0x46,0xDB,0xE4,0xDE,0x6A,0xCA,0xCF,0xEA,0xEC,0x6A,
0xA4,0xAC,0x2C,0xFB,0xCA,0x1B,0x20,0xA1,0xA5,0xED,0x6C,0x08,0x50,0x1D,0x8A,0x10,
0x67,0xF9,0x26,0xBD,0x6A,0x03,0x8B,0x2F,0x66,0xB8,0x66,0x4E,0xF0,0x05,0x21,0x9E,
0x26,0xCA,0x20,0x7F,0xF5,0xF4,0xED,0x55,0x27,0x8B,0x60,0x8C,0x6F,0xF2,0x47,0xE4,
0xA2,0xE3,0xB4,0x15,0x80,0xC8,0xEF,0x2B,0xA3,0xA2,0xF4,0xE6,0x1A,0xCE,0x45,0x9A,
0xE3,0xD0,0xB2,0xD7,0x1F,0x3F,0x89,0x51,0xE2,0x91,0xF2,0x24,0x85,0x39,0x23,0xE0,
0x20,0x85,0xB8,0x91,0xBF,0x27,0x22,0xDF,0x21,0xC4,0xF8,0x62,0x25,0x21,0x88,0x6E,
0x61,0xB6,0xBE,0x53,0x20,0xD0,0x44,0xA5,0x60,0xF7,0xFE,0xA0,0xBA,0xD6,0xEE,0x14,
0xA1,0x58,0x43,0x12,0x55,0x7D,0x99,0x8C,0xA0,0x19,0x03,0xE1,0xCF,0x7B,0x33,0x3D,
0xE0,0x6B,0x45,0xD0,0xCA,0x8A,0xFF,0xF6,0xE1,0x2A,0x05,0x23,0x50,0x8C,0x55,0x47,
0x23,0x3E,0x4F,0x96,0x6A,0x92,0x54,0x78,0x22,0x7F,0x0F,0x65,0xF0,0x94,0xFE,0xC9,
0x62,0x0D,0x49,0x54,0xF5,0x65,0x32,0x02,0x63,0x4C,0x09,0xA7,0x6F,0x63,0x98,0xB3,
0xE6,0x24,0xDD,0x3E,0x80,0x59,0x30,0x7C,0xE7,0x65,0x9D,0xCD,0x1A,0x5F,0x9A,0xCD,
0xA7,0x17,0xDB,0xFC,0x1F,0xAE,0x56,0x06,0xA6,0x56,0x9B,0x0F,0x85,0xA8,0xFC,0xB7,
0x64,0x42,0xD1,0xBA,0xBF,0xB6,0xFD,0x88,0x65,0x03,0x91,0x49,0x25,0xB0,0x57,0x39,
0x25,0x71,0xD7,0x78,0x20,0x41,0x9B,0xF2,0x24,0x30,0x97,0x8B,0xBA,0x47,0x31,0x43,
0x6C,0x11,0xF9,0x6F,0x55,0xCE,0xF9,0x74,0x6D,0x50,0xB9,0x9C,0xCF,0xC8,0x53,0xC5,
0x2D,0x22,0xFF,0xAD,0xCA,0x39,0x9F,0x0E,0x2C,0x63,0xBF,0x5E,0x50,0x3F,0x35,0xBF,
0xEE,0x77,0xF5,0xEB,0x6A,0x21,0x34,0x80,0xEF,0x36,0xB5,0x18,0xF0,0x27,0x9E,0x31,
0xAF,0x44,0xF3,0x29,0xF5,0xD6,0x52,0xFA,0xAE,0x05,0xB3,0xDA,0x6F,0xD0,0xF8,0x4B,
0x2B,0x6D,0x67,0x43,0x80,0xEA,0x50,0x84,0x2A,0x2C,0x27,0xB0,0x1A,0xEC,0xFA,0x35,
0x6A,0x5E,0x61,0x81,0x1F,0x1D,0x36,0xFE,0x6B,0x1F,0x21,0x72,0x85,0x1B,0x9C,0x4F,
0xA9,0x0B,0x6B,0xC7,0xBF,0x05,0x9D,0x70,0xA8,0x4A,0x2B,0x34,0x25,0x03,0x37,0xC1,
0xE8,0x38,0x6D,0x05,0x20,0xF2,0xFB,0x0A,0xE9,0x79,0x2D,0xF6,0xBA,0xF4,0x51,0xBB,
0x78,0x7A,0xB1,0xCD,0xFF,0xE1,0x6A,0x65,0x79,0x3B,0xF1,0x3E,0x65,0xE7,0xC0,0xD4,
0x39,0x49,0xB7,0x0F,0x60,0x16,0x0C,0x1F,0x38,0x08,0xF7,0xFC,0xFA,0x10,0xA6,0xAE,
0xFA,0x1C,0xBD,0x49,0xC0,0x0E,0xA7,0x91,0xFB,0x5D,0xFD,0xBA,0x5A,0x08,0x0D,0x20,
0xBB,0x2F,0xBB,0x8B,0x5F,0xF9,0xC1,0xEB,0xBA,0x6E,0xFB,0x78,0xC5,0xFF,0x6B,0x5A,
0x3F,0x06,0x2F,0xE1,0x2A,0xC5,0xC3,0x95,0x3E,0x47,0x6F,0x12,0xB0,0xC3,0x69,0x24,
0x7E,0x35,0x29,0x23,0xB5,0x32,0xA5,0xEF,0x7F,0x74,0x69,0xD0,0x2F,0x34,0x0F,0x5E,
0xBD,0x60,0x23,0x65,0x15,0x2A,0x0E,0x61,0xBC,0x21,0x63,0x96,0x8F,0x2C,0xA4,0xD0,
0xFC,0x53,0x25,0xA7,0x8A,0xDD,0x68,0x1B,0xFD,0x12,0x65,0x54,0x10,0xDB,0xC2,0xAA,
0xB5,0x33,0x0B,0xB0,0xFF,0x52,0x0A,0x9D,0xB4,0x72,0x4B,0x43,0x65,0x54,0xA0,0x2C,
0xF4,0x00,0x0D,0x72,0x60,0xA5,0x6C,0xE7,0xF5,0x41,0x4D,0x81,0xFA,0xA3,0xC6,0x56,
0x37,0x55,0x07,0x34,0xC0,0xBD,0xC7,0x69,0x36,0x14,0x47,0xC7,0x5A,0xBB,0x6D,0xD8,
0x76,0x66,0x01,0xF6,0x5F,0x4A,0xA1,0x13,0x77,0x27,0x41,0x05,0xC5,0x4C,0x0B,0xA2,
0xF2,0x4F,0x95,0x9C,0x2A,0x76,0xA3,0x6D,0xF3,0x0E,0xD5,0x6F,0xB0,0x70,0x09,0xDC,
0xB3,0x7C,0x93,0x5E,0xB5,0x81,0xC5,0x17,0xB2,0x3D,0xD3,0xAD,0x2F,0x87,0x6F,0xA6,
0x70,0x29,0x99,0x18,0x15,0x99,0x6E,0x99,0x71,0x68,0xD9,0xEB,0x8F,0x9F,0xC4,0x28,
0x31,0x1A,0x9F,0xDA,0x8A,0x6E,0x08,0xE3,0x30,0x5B,0xDF,0x29,0x10,0x68,0xA2,0x52,
0x50,0xAC,0x21,0x89,0xAA,0xBE,0x4C,0x46,0x51,0xED,0x61,0x7A,0x30,0xB8,0xE6,0xF7,
0x11,0x9F,0x27,0x4B,0x35,0x49,0x2A,0x3C,0x10,0xDE,0x67,0xB8,0xAF,0x4F,0x80,0x8D,
0xD2,0xCA,0x2D,0x0D,0x95,0x51,0x81,0xB2,0xD3,0x8B,0x6D,0xFE,0x0F,0x57,0x2B,0x03,
0x93,0xF9,0x2B,0xCF,0x0A,0xA6,0xE7,0xC8,0x92,0xB8,0x6B,0x3C,0x90,0xA0,0x4D,0x79,
0x17,0xD0,0xBF,0xA5,0x7F,0x9A,0xE5,0xB6,0x16,0x91,0xFF,0x56,0xE5,0x9C,0x4F,0x07,
0x56,0xE3,0xB9,0x67,0xE0,0x6D,0x83,0xCC,0x57,0xA2,0xF9,0x94,0x7A,0x6B,0x29,0x7D,
0x95,0xB6,0xB3,0x21,0x40,0x75,0x28,0x42,0x94,0xF7,0xF3,0xD2,0xDA,0x73,0x82,0xF3,
0xD4,0x85,0xB5,0xE3,0xDF,0x82,0x4E,0x38,0xD5,0xC4,0xF5,0x10,0x45,0x84,0xE4,0x89,
0x9D,0xE5,0x9B,0xF4,0xAA,0x0D,0x2C,0xBE,0x9C,0xA4,0xDB,0x07,0x30,0x0B,0x86,0x0F,
0xDC,0xD6,0x9D,0x36,0x35,0xFA,0x4A,0xC4,0xDD,0x97,0xDD,0xC5,0xAF,0xFC,0xE0,0x75,
0x1F,0x83,0x97,0x70,0x95,0xE2,0xE1,0x4A,0x1E,0xC2,0xD7,0x83,0x0F,0xE4,0x4B,0xFB,
0x5E,0xB0,0x91,0xB2,0x0A,0x15,0x87,0x30,0x5F,0xF1,0xD1,0x41,0x90,0x13,0x2D,0x81,
0xDA,0x99,0x05,0xD8,0x7F,0x29,0x85,0x4E,0xDB,0xD8,0x45,0x2B,0xE5,0x2F,0x2F,0xFF,
0x9B,0xAA,0x03,0x1A,0xE0,0xDE,0xE3,0x34,0x9A,0xEB,0x43,0xE9,0x7A,0xD8,0x49,0x85,
0x58,0xFF,0x09,0x5C,0x40,0xC6,0x48,0xBA,0x59,0xBE,0x49,0xAF,0xDA,0xC0,0xE2,0x0B,
0x19,0xCC,0x0F,0x9E,0xDF,0x31,0x2E,0xC0,0x18,0x8D,0x4F,0x6D,0x45,0x37,0x84,0x71,
0x89,0x8E,0xD3,0x56,0x00,0x22,0xBF,0xAF,0x88,0xCF,0x93,0xA5,0x9A,0x24,0x15,0x1E,
0xC8,0xBD,0xD5,0x94,0x9F,0xD5,0xD9,0xD5,0xC9,0xFC,0x95,0x67,0x05,0xD3,0x73,0x64,
0x0B,0xE8,0xDF,0xD2,0x3F,0xCD,0x72,0x5B,0x0A,0xA9,0x9F,0x21,0xA5,0xCB,0xD8,0xEA,
0x4A,0xDB,0xD9,0x10,0xA0,0x3A,0x14,0x21,0x4B,0x9A,0x99,0xE3,0x3A,0x3C,0xBE,0x90,
0xCE,0xF2,0x4D,0x7A,0xD5,0x06,0x16,0x5F,0xCF,0xB3,0x0D,0x89,0x4F,0x00,0xBC,0xEE,
0x8F,0xC1,0x4B,0xB8,0x4A,0xF1,0x70,0x25,0x8E,0x80,0x0B,0x4B,0xD0,0xF7,0xDA,0x94,
0x4C,0x94,0x41,0xFE,0xEA,0xE9,0xDB,0xAB,0x4D,0xD5,0x01,0x0D,0x70,0xEF,0x71,0x1A,
0x0D,0xA7,0x47,0x3C,0x75,0x1E,0xBD,0xD1,0x0C,0xE6,0x07,0xCF,0xEF,0x18,0x17,0x60,
0x44,0xC7,0x69,0x2B,0x00,0x91,0xDF,0x57,0x45,0x86,0x29,0xD8,0x9A,0x97,0x75,0xE6,
0x05,0xF4,0x6F,0xE9,0x9F,0x66,0xB9,0x2D,0x04,0xB5,0x2F,0x1A,0x05,0x60,0x13,0x9C,
0xC6,0xA1,0x65,0xAF,0x3F,0x7E,0x12,0xA3,0xC7,0xE0,0x25,0x5C,0xA5,0x78,0xB8,0x12,
0x87,0x92,0x63,0x6D,0xA0,0x89,0x74,0xD9,0x86,0xD3,0x23,0x9E,0x3A,0x8F,0xDE,0x68,
0x03,0xBB,0xF7,0x07,0xD5,0xB5,0x76,0xA7,0x02,0xFA,0xB7,0xF4,0x4F,0xB3,0xDC,0x16,
0x42,0x88,0xF1,0xC5,0x4A,0x42,0x10,0xDD,0x43,0xC9,0xB1,0x36,0xD0,0x44,0xBA,0x6C,
0x81,0xDD,0xFB,0x83,0xEA,0x5A,0xBB,0x53,0x80,0x9C,0xBB,0x70,0x70,0x5C,0x11,0xE2,
0xC0,0xEE,0xFD,0x41,0x75,0xAD,0xDD,0x29,0xC1,0xAF,0xBD,0xB2,0xEF,0xAB,0x77,0x98,
0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x97,0xCF,0xDE,0xFE,0x97,0xCF,0xDE,0x7E,
0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x28,0x7F,0xB1,0x1C,0x58,0x41,0xB1,0x1C,0x78,0x86,0xB0,0x1C,0xE8,0x70,0xB1,0x1C,
0xF8,0x4E,0xB1,0x1C,0xB8,0x4E,0xB1,0x1C,0x28,0x7E,0xB1,0x1C,0x08,0x7C,0xB1,0x1C,
0xC8,0x24,0xD7,0x1D,0x88,0x5D,0xD7,0x1D,0xF8,0x5A,0xD7,0x1D,0xB8,0x70,0xB1,0x1C,
0xF8,0x1B,0xD7,0x1D,0xD8,0x7F,0xD7,0x1D,0x78,0x59,0xD3,0x1D,0xE8,0xB4,0xD2,0x1D,
0x48,0x15,0xD2,0x1D,0xC8,0xF0,0xB0,0x1C,0x78,0x4F,0xBE,0x1C,0x48,0x98,0x84,0x1F,
0xE8,0xF4,0xB0,0x1C,0x28,0xF4,0xB0,0x1C,0xC8,0x55,0xBE,0x1C,0x68,0x6D,0xB1,0x1C,
0xC8,0x58,0xBE,0x1C,0x68,0x40,0xB1,0x1C,0x78,0x5D,0xBE,0x1C,0x48,0xE9,0xB0,0x1C,
0x38,0xC3,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFC,0x02,0x01,
0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

byte_410F00 = [
0x42,0x4D,0x96,0x02,0x36,0x28,0x32,0x04,0x01,0x18,0x60,0x02,0xE7,0xBF,0xC8,0xC8,
0xE0,0xDD,0xF2,0xFF,0xC8,0xE0,0xDD,0x24,0x1C,0xED,0xC8,0xE0,0xDD,0xCC,0x48,0x3F,
0xE8,0xA2,0x57,0x7A,0xB9,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0x1D,0xE6,0xB5,0xCC,0x48,
0x3F,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0x4C,0xB1,0x22,0x7F,0x7F,0x7F,0xC8,0xE0,0xDD,
0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0xF2,0xFF,0x4C,0xB1,0x22,0xC8,0xE0,0xDD,0xC8,0xE0,
0xDD,0xCC,0x48,0x3F,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0x7F,0x7F,0x7F,0x24,0x1C,0xED,
0xCC,0x48,0x3F,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0x24,0x1C,0xED,0x27,0x7F,0xFF,0xC8,
0xE0,0xDD,0xC8,0xE0,0xDD,0x1D,0xE6,0xB5,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0x9A,0x76,
0x83,0xC8,0xE0,0xDD,0x57,0x7A,0xB9,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0x4C,0xB1,0x22,
0xE8,0xA2,0x24,0x1C,0xED,0xC9,0xAE,0xFF,0x24,0x1C,0xED,0xCC,0x48,0x3F,0xC8,0xE0,
0xDD,0x4C,0xB1,0x22,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,
0xC8,0xE0,0xDD,0x24,0x1C,0xED,0xC8,0xE0,0xDD,0x27,0x7F,0xFF,0xC8,0xE0,0xDD,0xC8,
0xE0,0xDD,0xC8,0xE0,0xDD,0xC9,0xAE,0xFF,0xC8,0xE0,0xDD,0xC8,0xE0,0xDD,0xC8,0xE0,
0xDD,0x57,0x7A,0xB9,0xC8,0xE0,0xDD,0x24,0x1C,0xED,0xC8,0xE0,0xDD,0xC8,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

data = []
flag = [0]*256
for i in range(0x100):

    t = 0
    for j in range(8):
        t += (dword_411020[i*8+j]<<(8*j))
    data.append(t)
    flag[data[i]>>56] = 1
print(flag)
    
#print(hex(data[1]))
    
mapp = string.ascii_lowercase+string.ascii_uppercase+string.digits
mapp = [ord(i) for i in mapp]

key = 0x81BAD8907DE045EB

def encrypt(input):

    output = 0
    for i in range(0x100):
        
        # CRC64
        ii = (input[i]^(output&0xff))
        #print(hex(ii),hex(output>>8))
        output = (output>>8)^data[ii]

    print(hex(output))
          
    return output

def decrypt(key,i,flag):
    
    if i == 0:
        
        if (0x4d0-sum(flag)) not in mapp:
            return 
            
    if i == -1 :

        #print (flag,sum(flag)==0x4d0)
        if sum(flag)==0x4d0:
            print(''.join(map(chr,flag)))
        return
        
    key_high = (key>>56)
    ii = -1
    for j in range(0x100):
        if (data[j]>>56) == key_high:
            ii = j
            #('[%]: find ii'%i)
            break
    #print(ii!=-1)
    
    if i%20 == 0:
        # it is flag[i], start brute
        for j in mapp:
            print(i,j)
            key1 = ((data[ii]^key)<<8) + (j^ii)
            decrypt(key1,i-1,flag+[j])
            
    else:
        print(i)
        key1 = ((data[ii]^key)<<8) + (byte_410F00[i]^ii)
        #print(hex(key1))
    
        decrypt(key1,i-1,flag)

def test_crc_xor():
    ii=[ord(i) for i in '0123456789123']
    for i in range(13):
        byte_410F00[i*20] = ii[i]
    a=encrypt(byte_410F00)
    
    for i in range(13):
        byte_410F00[i*20] = 0
    b=encrypt(byte_410F00)
    
    input = [0]*0x100
    for i in range(13):
        input[i*20] = ii[i]
    c=encrypt(input)
    
    print(a == b^c)

for i in range(13):
    byte_410F00[i*20] = 0
encrypt(byte_410F00)

print("start")
for i in range(13):
    
    for j in range(7):
        input = [0]*0x100
        input[i*20] = (1<<j)
        encrypt(input)

#decrypt(0x81BAD8907DE045EB,0xff,[])

# sub_004012D0 == xor
'''
def sub_004012D0(a,b):
    
    c = a^b
    
    
    for i in range(64):

        aa = a&1
        bb = b&1

        if aa != bb:
            c |= 0x8000000000000000

        if i < 63:
            c = (c>>1)
        a = (a>>1)
        b = (b>>1)
    
    print(hex(c&0xffffffff))
    return c
'''
